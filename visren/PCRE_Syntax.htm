<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<HTML lang=en xml:lang="en" xmlns="http://www.w3.org/1999/xhtml"><HEAD><TITLE>PHP: Синтаксис регулярных выражений - Manual</TITLE>

<H1><A name=reference.pcre.pattern.syntax></A>Синтаксис регулярных
выражений</H1>
<DIV class=refnamediv><A name=AEN148625></A>Синтаксис регулярных
выражений&nbsp;--&nbsp;Описание синтаксиса Perl-совместимых регулярных выражений
(PCRE)</DIV>
<DIV class=refsect1><A name=AEN148628></A>
<H2>Вступление</H2>
<P>Библиотека PCRE является набором функций, которые реализуют поиск по шаблону,
используя синтаксис, подобный синтаксису Perl 5 с небольшими отличиями. Текущая
реализация соответствует версии Perl 5.005. </P></DIV>
<DIV class=refsect1><A name=AEN148631></A>
<H2>Отличия от Perl</H2>
<P>Разница описана относительно версии Perl 5.005.
<P></P>
<OL type=1>
  <LI>
  <P>По умолчанию пробельными символами являются все символы, распознаваемые
  библиотечной функцией языка Си isspace(). Это позволяет собрать PCRE
  библиотеку с произвольными символьными наборами. В стандартной поставке
  функция isspace() определяет как пробельные следующие символы: пробел, разрыв
  страницы, начло строки, перевод каретки, горизонтальную и вертикальную
  табуляцию. Начиная с версии Perl 5.002, символ вертикальной табуляции \v не
  является пробельным и, соответственно, не соответствует классу символов \s.
  </P>
  <LI>
  <P>PCRE не позволяет использовать квантификаторы повторения в условных
  выражениях. Perl позволяет это делать, но получаемый результат может
  существенно отличаться от ожидаемого. Например, (?!a){3} не означает, что три
  следующих символа будут не 'a'. Он всего лишь трижды утверждает, что следующий
  символ не 'a'. </P>
  <LI>
  <P>Во время сопоставления подмаски, находящейся внутри отрицающего условного
  выражения, счетчик подмасок увеличивается, но сами значения, зафиксированные
  такой подмаской, не возвращаются (в результирующем массиве по соответствующим
  смещениям находятся пустые строки). Perl устанавливает значения
  соответствующих числовых переменных исходя из предшествующей модмаски,
  найденной непосредственно перед тем, как отрицающее условие не смогло быть
  сопоставлено (и таким образом выполнилось), но только в том случае, если
  условное выражение содержит только одну ветвь. </P>
  <LI>
  <P>Несмотря на то, что символ, соответствующий ASCII-коду 0 (бинарный ноль),
  допускается в обрабатываемом тексте, он недопустим в шаблоне (так как
  передается в качестве аргумента Си-функции как нормальная строка, завершаемая
  нулевым символом). Cледующая служебная последовательность "\\x00" может быть
  использована для представления бинарного ноля. </P>
  <LI>
  <P>Следующие служебные последовательности, используемые в Perl, не
  поддерживаются: \l, \u, \L, \U, \E, \Q. Это связано с тем, что обработка
  указанных последовательностей производится внутренним Perl-механизмом
  обработки строк и не является частью механизма регулярных выражений. </P>
  <LI>
  <P>Perl модификатор \G не поддерживается, так как он не входит в рамки
  простого сопоставления шаблону. </P>
  <LI>
  <P>Достаточно очевидно, что PCRE не поддерживает конструкции вида (?{code}).
  </P>
  <LI>
  <P>Теперь немного о чудаковатости в Perl 5.005_02, связанной с фиксацией
  результата в случае, когда часть шаблона повторяется. Например, применяя
  шаблон /^(a(b)?)+$/ к строке "aba", переменная $2 соответствует 'b'. Но при
  применении шаблона /^(aa(bb)?)+$/ к строке "aabbaa" переменная $2 оказывается
  неустановленной. А в случае, если шаблон изменить на /^(aa(b(b))?)+$/,
  переменные $2 и $3 окажутся установленными. В Perl 5.004, в обоих случаях
  переменная $2 будет содержать соответствующее значение, что соответствует
  PCRE. Если в будущем Perl изменит поведение в данной ситуации, PCRE также
  может измениться. </P>
  <LI>
  <P>Еще одна несовместимость, не находящая разумного объяснения. Шаблон
  /^(a)?(?(1)a|b)+$/ соответствует строке 'a' в PERL, но не в PCRE. В то же
  время шаблон /^(a)?a/ соответствует строке 'a' и в Perl и в PCRE, оставляя
  переменную $1 неустановленной. </P>
  <LI>
  <P>PCRE также предоставляет некоторое расширение возможностей Perl для
  обработки регулярных выражений:
  <P></P>
  <OL type=a>
    <LI>
    <P>Несмотря на то, что условное выражение, ссылающееся на предыдущие
    вхождения, должно соответствовать строке фиксированной длины, каждая ветка
    такого выражения в отдельности может соответствовать строке произвольной
    длины (отличающейся от длины других веток). В то время как Perl 5.005
    требует, чтобы все они имели одинаковую длину. </P>
    <LI>
    <P>В случае, если модификатор <A
    href="reference.pcre.pattern.modifiers.php">PCRE_DOLLAR_ENDONLY</A>
    используется и <A
    href="reference.pcre.pattern.modifiers.php">PCRE_MULTILINE</A> не
    используется, специальный символ '$' соответствует исключительно концу
    обрабатываемых данных. </P>
    <LI>
    <P>В случае, если модификатор <A
    href="reference.pcre.pattern.modifiers.php">PCRE_EXTRA</A> используется,
    обратный слеш, за которым следует символ, не имеющий специального значения,
    приводит к ошибке. </P>
    <LI>
    <P>Модификатор <A
    href="reference.pcre.pattern.modifiers.php">PCRE_UNGREEDY</A> инвертирует
    жадность квантификаторов, таким образом они по умолчанию не жадные. Но
    становятся жадными, если за ними следует символ '?'. </P></LI></OL>
  <P></P></LI></OL>
<P></P></DIV>
<DIV class=refsect1><A name=regexp.reference></A>
<H2>Регулярные выражения в деталях</H2>
<DIV class=refsect2><A name=regexp.introduction></A>
<H3>Предисловие</H3>
<P>Ниже описан синтаксис Perl-совместимых регулярных выражений (PCRE).
Регулярные выражения также хорошо описаны в документации языка Perl и в
достаточно большом количестве книг, с изобилием примеров, например, книга
"Mastering Regular Expressions", написанная Effrey Friedl's (ISBN
1-56592-257-3). </P>
<P>Регулярное выражение - это шаблон, применяемый к заданному тексту слева
направо. Большая часть символов сохраняет свое значение в шаблоне и означает
совпадение с соответствующим символом. Банальный пример: шаблон <TT
class=literal>The quick brown fox</TT> соответствует той части строки, которая
идентична приведенной фразе. </P></DIV>
<DIV class=refsect2><A name=regexp.reference.meta></A>
<H3>Метасимволы</H3>
<P>Сила регулярных выражений исходит из возможности использовать условия и
повторения в шаблоне. Они записываются при помощи <SPAN class=emphasis><I
class=emphasis>метасимволов </I></SPAN>, которые интерпретируются специальным
образом. </P>
<P>Существуют два различных набора метасимволов: те, которые используются внутри
квадратных скобок, и те, которые используются вне квадратных скобок. Рассмотрим
их более детально. Вне квадратных скобок используются следующие метасимволы:
<P></P>
<DIV class=variablelist>
<DL>
  <DT><SPAN class=emphasis><I class=emphasis>\</I></SPAN>
  <DD>
  <P>общий экранирующий символ, допускающий несколько вариантов применения </P>
  <DT><SPAN class=emphasis><I class=emphasis>^</I></SPAN>
  <DD>
  <P>декларирует начало данных (или линии, в многострочном режиме) </P>
  <DT><SPAN class=emphasis><I class=emphasis>$</I></SPAN>
  <DD>
  <P>декларирует конец данных (или линии, в многострочном режиме) </P>
  <DT><SPAN class=emphasis><I class=emphasis>.</I></SPAN>
  <DD>
  <P>соответствует любому символу, кроме перевода строки (по умолчанию) </P>
  <DT><SPAN class=emphasis><I class=emphasis>[</I></SPAN>
  <DD>
  <P>начало описания символьного класса </P>
  <DT><SPAN class=emphasis><I class=emphasis>]</I></SPAN>
  <DD>
  <P>конец описания символьного класса </P>
  <DT><SPAN class=emphasis><I class=emphasis>|</I></SPAN>
  <DD>
  <P>начало ветки условного выбора </P>
  <DT><SPAN class=emphasis><I class=emphasis>(</I></SPAN>
  <DD>
  <P>Начало подмаски </P>
  <DT><SPAN class=emphasis><I class=emphasis>)</I></SPAN>
  <DD>
  <P>конец подмаски </P>
  <DT><SPAN class=emphasis><I class=emphasis>?</I></SPAN>
  <DD>
  <P>расширяет смысл метасимвола '(' , квантификатор, означающий ноль либо одно
  вхождение, квантификатор жадности </P>
  <DT><SPAN class=emphasis><I class=emphasis>*</I></SPAN>
  <DD>
  <P>квантификатор, означающий ноль или более вхождений </P>
  <DT><SPAN class=emphasis><I class=emphasis>+</I></SPAN>
  <DD>
  <P>квантификатор, означающий одно или более вхождений </P>
  <DT><SPAN class=emphasis><I class=emphasis>{</I></SPAN>
  <DD>
  <P>начало количественного квантификатора </P>
  <DT><SPAN class=emphasis><I class=emphasis>}</I></SPAN>
  <DD>
  <P>конец количественного квантификатора </P></DD></DL></DIV>Часть шаблона,
заключенная в квадратные скобки, называется символьным классом. Внутри
символьных классов используются следующие метасимволы:
<P></P>
<DIV class=variablelist>
<DL>
  <DT><SPAN class=emphasis><I class=emphasis>\</I></SPAN>
  <DD>
  <P>общий экранирующий символ </P>
  <DT><SPAN class=emphasis><I class=emphasis>^</I></SPAN>
  <DD>
  <P>означает отрицание класса, допустим только в начале класса </P>
  <DT><SPAN class=emphasis><I class=emphasis>-</I></SPAN>
  <DD>
  <P>означает символьный интервал </P>
  <DT><SPAN class=emphasis><I class=emphasis>]</I></SPAN>
  <DD>
  <P>завершает символьный класс </P></DD></DL></DIV>В нижеследующих секциях
детально описан каждый из перечисленных метасимволов.
<P></P></DIV>
<DIV class=refsect2><A name=regexp.reference.backslash></A>
<H3>Обратный слеш</H3>
<P>Символ '\' имеет несколько применений. Прежде всего, если он предшествует не
буквенно-цифровому символу, он снимает с него специальное значение. Применение
обратного слеша как экранирующего символа допустимо как в символьном классе, так
и вне него. </P>
<P>Например, если вы хотите задать соответствие символу '*', в шаблоне вам
необходимо указать '\*'. Это предотвратит трактование '*' как метасимвола с
особым значением. Во избежание ошибок всегда экранируйте не буквенно-цифровые
символы, если хотите указать соответствие самому символу. В частном случае для
сопоставления с самим символом обратного слеша, используйте запись '\\'. </P>
<P>В случае, если указан модификатор <A
href="reference.pcre.pattern.modifiers.php">PCRE_EXTENDED</A>, пробельные
символы в шаблоне (вне описания символьного класса) игнорируются. Также
игнорируется часть строки, находящаяся между символом '#' (опять же, не
участвующем в описании символьного класса) и следующим символом перевода строки.
В таком случае обратный слеш можно применять как экранирующий символ для
указания вхождений пробельным символов в шаблоне. </P>
<P>Второе примение обратного слеша заключается в том, что он позволяет
использовать непечатные символы в описании шаблона. При том, что в PCRE нет
ограничений на использование непечатных символов (исключая бинарный 0, который
интерпретируется как конец шаблона), при редактировании программного кода в
каком-либо текстовом редакторе гораздо удобнее использовать следующие
комбинации: </P>
<P>
<P></P>
<DIV class=variablelist>
<DL>
  <DT><SPAN class=emphasis><I class=emphasis>\a</I></SPAN>
  <DD>
  <P>символ оповещения, сигна, (шестнадцатиричный код 07) </P>
  <DT><SPAN class=emphasis><I class=emphasis>\cx</I></SPAN>
  <DD>
  <P>"Ctrl+x", где x - произвольный символ </P>
  <DT><SPAN class=emphasis><I class=emphasis>\e</I></SPAN>
  <DD>
  <P>escape (шестнадцатеричный код 1B) </P>
  <DT><SPAN class=emphasis><I class=emphasis>\f</I></SPAN>
  <DD>
  <P>разрыв страницы (шестнадцатиричный код 0C) </P>
  <DT><SPAN class=emphasis><I class=emphasis>\n</I></SPAN>
  <DD>
  <P>перевод строки (шестнадцатиричный код 0A) </P>
  <DT><SPAN class=emphasis><I class=emphasis>\r</I></SPAN>
  <DD>
  <P>возврат каретки (шестнадцатиричный код 0D) </P>
  <DT><SPAN class=emphasis><I class=emphasis>\t</I></SPAN>
  <DD>
  <P>табуляция (шестнадцатиричный код 09) </P>
  <DT><SPAN class=emphasis><I class=emphasis>\xhh</I></SPAN>
  <DD>
  <P>символ с шестнадцатиричным кодом hh </P>
  <DT><SPAN class=emphasis><I class=emphasis>\ddd</I></SPAN>
  <DD>
  <P>символ с восьмеричным кодом либо ссылка на подмаску </P></DD></DL></DIV>
<P></P>
<P>Если быть более точным, комбинация <TT class=literal>\cx</TT>
интерпретируется следующим образом: если '<TT class=literal>x</TT>' - символ
нижнего регистра, он преобразуется в верхний регистр. После этого шестой бит
инвертируется. Таким образом '<TT class=literal>\cz</TT>' интерпретируется как
1A, в то время как '<TT class=literal>\c;</TT>' получает шестнадцатиричное
значение 3B, а '<TT class=literal>\c;</TT>' - 7B. </P>
<P>После "<TT class=literal>\x</TT>" считываются еще две шестнадцатиричные цифры
(они могут быть записаны в нижнем регистре). </P>
<P>После "<TT class=literal>\0</TT>" считываются две восьмеричные цифры. Если в
записи менее двух цифр, будут использованы все фактически присутствующие цифры.
Таким образом, последовательность "<TT class=literal>\0\x\07</TT>" будет
интерпретирована как два бинарных нуля, за которыми следует символ оповещения
(звонок). В случае, если вы используете представление числа в восьмеричном коде,
убедитесь, что за начальным нулем следуют две значащие цифры. </P>
<P>Обработка обратного слеша, за которым следует не нулевая цифра, несколько
сложнее. Вне символьного класса PCRE читает следующие за обратным слешем цифры
как десятичное число. Если полученное значение меньше десяти, либо если шаблон
содержит по меньшей мере такое же количество предшествующих текущей позиции
подмасок, вся конструкция интерпретируется как ссылка на подмаску. Более
детальное описание будет приведено ниже при обсуждении механизма работы
подмасок. </P>
<P>Внутри символьного класса, либо если полученное значение больше 9 и
соответствующее количество предшествующих подмасок отсутствует, PCRE считывает
до трех восьмеричных цифр, следующих за обратным слешем, и генерирует один байт
из последних 8-ми значащих битов полученного значения. Все последующие цифры
обозначают себя же. Например: </P>
<P>
<P></P>
<DIV class=variablelist>
<DL>
  <DT><SPAN class=emphasis><I class=emphasis>\040</I></SPAN>
  <DD>
  <P>еще один способ записи пробела </P>
  <DT><SPAN class=emphasis><I class=emphasis>\40</I></SPAN>
  <DD>
  <P>то же самое в случае, если данной записи предшествует менее сорока подмасок
  </P>
  <DT><SPAN class=emphasis><I class=emphasis>\7</I></SPAN>
  <DD>
  <P>всегда интерпретируется как ссылка на подмаску </P>
  <DT><SPAN class=emphasis><I class=emphasis>\11</I></SPAN>
  <DD>
  <P>может быть как обратной ссылкой, так и альтернативной записью символа
  табуляции </P>
  <DT><SPAN class=emphasis><I class=emphasis>\011</I></SPAN>
  <DD>
  <P>всегда интерпретируется как символ табуляции </P>
  <DT><SPAN class=emphasis><I class=emphasis>\0113</I></SPAN>
  <DD>
  <P>символ табуляции, за которым следует цифра "3" </P>
  <DT><SPAN class=emphasis><I class=emphasis>\113</I></SPAN>
  <DD>
  <P>интерпретируется как символ с восьмеричным кодом 113 (так как ссылок на
  подмаски не может быть более чем 99) </P>
  <DT><SPAN class=emphasis><I class=emphasis>\377</I></SPAN>
  <DD>
  <P>байт, всецело состоящий из единичных битов </P>
  <DT><SPAN class=emphasis><I class=emphasis>\81</I></SPAN>
  <DD>
  <P>либо обратная ссылка, либо бинарный ноль, за которым следуют цифры "8" и
  "1" </P></DD></DL></DIV>
<P></P>
<P>Следует помнить, что восьмеричные значения, превышающие 100, следует писать
без лидирующего нуля, так как читается не более трех восьмеричных цифр. </P>
<P>Все последовательности, определяющие однобайтное значение, могут встречаться
как внутри, так и вне символьных классов. Кроме того, внутри символьного класса
запись "<TT class=literal>\b</TT>" интерпретируется как символ возврата
('backspace', шестнадцатеричный код 08). Вне символьного класса она имеет другое
значение (какое именно, описано ниже). </P>
<P>Третье использование обратного слеша - указание общего типа символов: </P>
<P>
<P></P>
<DIV class=variablelist>
<DL>
  <DT><SPAN class=emphasis><I class=emphasis>\d</I></SPAN>
  <DD>
  <P>любая десятичная цифра </P>
  <DT><SPAN class=emphasis><I class=emphasis>\D</I></SPAN>
  <DD>
  <P>любой символ, кроме десятичной цифры </P>
  <DT><SPAN class=emphasis><I class=emphasis>\s</I></SPAN>
  <DD>
  <P>любой пробельный символ </P>
  <DT><SPAN class=emphasis><I class=emphasis>\S</I></SPAN>
  <DD>
  <P>любой непробельный символ </P>
  <DT><SPAN class=emphasis><I class=emphasis>\w</I></SPAN>
  <DD>
  <P>Любой символ, образующий "слово" </P>
  <DT><SPAN class=emphasis><I class=emphasis>\W</I></SPAN>
  <DD>
  <P>Любой символ, не образующий "слово" </P></DD></DL></DIV>
<P></P>
<P>Каждая пара таких специальных последовательностей делит полное множество всех
символов на два непересекающихся множества. Любой символ соответствует одному и
только одному множеству из пары. </P>
<P>"word" символ - это произвольная цифра, буква или символ подчеркивания, проще
говоря, любой символ, который может являться частью '<TT
class=literal>слова</TT>' в Perl. Определение букв и цифр управляется
символьными таблицами, с которыми PCRE был собран. И, как следствие, эти наборы
могут отличаться в различных локализированных дистрибутивах. Например, в локали
"fr" (Франция) некоторые символы с кодом выше 128 используются для записи
ударных символов и, соответственно, соответствуют маске <TT
class=literal>\w</TT>. </P>
<P>Описанные выше типы символов могут применяться как внутри, так и вне
символьных классов, и соответствуют одному символу данного типа. </P>
<P>Четвертое использование обратного слеша - нотация некоторых формальных
утверждений, описывающих условия касательно месторасположения особых позиций в
строке и совершенно не затрагивающих сами символы. Такими управляющими
последовательностями являются: </P>
<P>
<P></P>
<DIV class=variablelist>
<DL>
  <DT><SPAN class=emphasis><I class=emphasis>\b</I></SPAN>
  <DD>
  <P>граница слова </P>
  <DT><SPAN class=emphasis><I class=emphasis>\B</I></SPAN>
  <DD>
  <P>не является границей слова </P>
  <DT><SPAN class=emphasis><I class=emphasis>\A</I></SPAN>
  <DD>
  <P>начало данных (независимо от многострочного режима) </P>
  <DT><SPAN class=emphasis><I class=emphasis>\Z</I></SPAN>
  <DD>
  <P>конец данных либо позиция перед последним символом строки, в случае если
  это символ перевода строки (независимо от многострочного режима) </P>
  <DT><SPAN class=emphasis><I class=emphasis>\z</I></SPAN>
  <DD>
  <P>конец данных (независимо от многострочного режима) </P></DD></DL></DIV>
<P></P>
<P>Описанные выше последовательности не могут встречаться в символьных классах
(исключая комбинацию '<TT class=literal>\b</TT>', которая внутри класса означает
символ возврата 'backspace'). </P>
<P>Границей слова считается такая позиция в строке, в которой из текущего и
последующего символа только один соответствует <TT class=literal>\w</TT> (т.е.
один из них соответствует <TT class=literal>\w</TT>, а другой <TT
class=literal>\W</TT>). Начало или конец строки также соответствуют границе
слова в случае, если первый или, соответственно, последний символ совпадает с
<TT class=literal>\w</TT>. </P>
<P>Специальные последовательности <TT class=literal>\A</TT>, <TT
class=literal>\Z</TT> и <TT class=literal>\z</TT> отличаются от
общеупотребляемых метасимволов начала строки '^' и конца строки '$' тем, что их
поведение не зависит от наличия или отсутствия модификаторов. На них никак не
влияют опции <A href="reference.pcre.pattern.modifiers.php">PCRE_MULTILINE</A> и
<A href="reference.pcre.pattern.modifiers.php">PCRE_DOLLAR_ENDONLY</A>. Разница
между <TT class=literal>\Z</TT> и <TT class=literal>\Z</TT> в том, что <TT
class=literal>\Z</TT> соответствует позиции перед последним символом в случае,
если последний символ - перевод строки. В то время, как <TT
class=literal>\z</TT> соответствует исключительно концу данных. </P></DIV>
<DIV class=refsect2><A name=regexp.reference.circudollar></A>
<H3>Метасимволы начала и конца строки</H3>
<P>По умолчанию, вне символьного класса метасимвол начала строки '^'
соответствует началу обрабатываемых данных (если не используются модификаторы).
Внутри символьного класса он имеет совершенно другое значение. </P>
<P>Метасимвол '^' не обязан быть первым символом строки в случае, если в шаблоне
используются несколько альтернатив, но должен быть первым символом в каждой из
альтернатив, в которой он встречается, если шаблон когда-либо сопоставим с
соответствующей веткой. Если все альтернативы начинаются с метасимвола начала
строки, то шаблон ограничен для совпадения исключительно в начале строки,
говорят что шаблон "заякорен". (Существуют и другие способы "заякорить" шаблон).
</P>
<P>Соответствие метасимволу конца строки достигается только в конце строки или
непосредственно перед последним символом в случае, если им является перевод
строки (если модификаторы не указаны). Метасимвол конца строки не обязан быть
последним символом шаблона в случае, если несколько альтернатив используется, но
должен быть последним символом в каждой альтернативе, в которой он фигурирует.
Внутри символьного класса символ '$' не имеет специального значения. </P>
<P>Поведение метасимвола конца строки может быть изменено при помощи
модификатора <A
href="reference.pcre.pattern.modifiers.php">PCRE_DOLLAR_ENDONLY</A> так, чтобы
он соответствовал исключительно концу строки. Данный флаг никак не касается
специальной последовательности \Z. </P>
<P>Значение метасимволов начала и конца строки меняется в случае, если
модификатор <A href="reference.pcre.pattern.modifiers.php">PCRE_MULTILINE</A>
используется. В таком случае, помимо совпадений в начале либо конце строки,
метасимволы '^' и '$' соответствуют позиции непосредственно после символа
перевода строки соответственно. Например, шаблон /^abc$/ встречается в строке
def\nabc" в многострочном режиме и не встречается в нормальном режиме. Таким
образом, шаблон который "заякорен" в однострочном режиме, не будет являться
"заякоренным" в многострочном режиме. Модификатор <A
href="reference.pcre.pattern.modifiers.php">PCRE_DOLLAR_ENDONLY</A> игнорируется
в случае, если модификатор <A
href="reference.pcre.pattern.modifiers.php">PCRE_MULTILINE</A> установлен. </P>
<P>Следует заметить, что служебные последовательности \A, \Z и \z могут
использоваться для сопоставления с началом либо концом строки в обоих режимах. И
если все ветви шаблона начинаются с \A, шаблон будет заякорен независимо от
присутствия модификатора <A
href="reference.pcre.pattern.modifiers.php">PCRE_MULTILINE</A>. </P></DIV>
<DIV class=refsect2><A name=regexp.reference.dot></A>
<H3>Метасимвол точка</H3>
<P>Вне символьного класса символ точка соответствует любому (в том числе и
непечатному, бинарному) символу, кроме символа перевода строки '\n'. В случае,
если модификатор <A href="reference.pcre.pattern.modifiers.php">PCRE_DOTALL</A>
используется, точка соответствует также символу перевода строки. Обработка
метасимвола "точка", никак не связана с метасимволами начала и конца строки,
единственное, что у них общего,- так это специальное отношение к символу
перевода строки. Внутри символьного класса точка не имеет специального значения.
</P></DIV>
<DIV class=refsect2><A name=regexp.reference.squarebrackets></A>
<H3>Квадратные скобки</H3>
<P>Открывающая квадратная скобка объявляет начало символьного класса,
завершаемого закрывающей квадратной скобкой. Символ ']' не имеет специального
значения, и в случае, если закрывающая квадратная скобка необходима как член
символьного класса, она должна быть первым символом непосредственно после
открывающей квадратной скобки (если используется метасимвол '^', то
непосредственно после него), либо экранироваться при помощи обратного слеша.
</P>
<P>Символьный класс соответствует одиночному символу обрабатываемой строки,
причем сам символ должен содержаться в наборе, определяемым классом. В случае,
если первым символом описания класса является '^', логика работы инвертируется:
класс соответствует одиночному символу, который не содержится в наборе,
определяемым классом. Если символ '^' необходим как член класса, его не следует
помещать первым символом в описании класса либо необходимо экранировать при
помощи обратного слеша. </P>
<P>К примеру, символьный класс [aeiou] соответствует любой гласной букве в
нижнем регистре, в то время, как [^aeiou] соответствует любому символу, не
являющемуся гласной буквой нижнего регистра. Следует понимать, что символ '^'
всего лишь удобный инструмент для описания символов, не используемых в
сопоставлении. </P>
<P>В случае, если производится регистронезависимое сопоставление, любая буква
символьного класса соответствует как своему верхнему, так и нижнему регистру.
Таким образом символьный класс [aeiou] соответствует как 'A', так и 'a'.
Аналогично, класс [^aeiou] не соответствует ни 'A', ни 'a'. </P>
<P>Внутри символьного класса символ перевода строки "\n" не имеет специального
значения, независимо от наличия модификаторов <A
href="reference.pcre.pattern.modifiers.php">PCRE_DOTALL</A> и <A
href="reference.pcre.pattern.modifiers.php">PCRE_MULTILINE</A>. Символьные
классы, построенные на отрицании, например [^a], соответствуют символу перевода
строки. </P>
<P>Символ минус '-' внутри класса используется для задания символьного
диапазона. Например, [d-m] соответствует любому символу, находящемуся между 'd'
и 'm', включая сами символы 'd' и 'm'. В случае, если '-' необходим, как член
класса, он должен находиться в такой позиции, в которой он не может
интерпретироваться как диапазон (как правило, это первый и последний символ
описания класса) либо экранироваться при помощи обратного слеша. </P>
<P>Недопустимо использовать закрывающую квадратную скобку в качестве границы
символьного диапазона. К примеру шаблон '[W-]46]' будет интерпретирован как
символьный класс, состоящий из двух символов ("W" и "-"), за которыми следует
строка "46]", таким образом шаблон будет соответствовать строкам "W46]" или
"-46]". Чтобы все же использовать символ ']' в описании диапазона, его
необходимо экранировать при помощи обратного слеша, к примеру шаблон [W-\]46]
будет интерпретирован как символьный класс, состоящий из символьного диапазона
вместе с двумя последующими символами '4' и '6'. Такого же результата можно
достичь используя шестнадцатиричное или восьмеричное представление символа ']'.
</P>
<P>Для построения символьных диапазонов используется ASCII представление
символов. Таким образом пограничные символы можно задавать непосредственно в
числовом представлении, например, [\000-\037]. В случае, если выполняется
регистронезависимый поиск, символы, описанные в диапазоне, также будут
соответствовать символам обеих регистров. К примеру, диапазоны [W-c] и
[][\^_`wxyzabc] эквивалентны (в случае регистронезависимого поиска). Например,
если установлена локаль "fr" (Франция) необходимо использовать [\xc8-\xcb] для
задания соответствия ударному 'E' в обоих регистрах. </P>
<P>Общие типы символов \d, \D, \s, \S, \w, и \W также могут использоваться в
символьных классах, добавляя при этом в класс те символы, которым соответствуют.
Например, класс [\dABCDEF] соответствует любой шестнадцатиричной цифре. Символ
'^' может использоваться совместно с общим типом, взятым в верхнем регисте, для
указания более узкого набора символов. Например, класс [^\W_] соответствует
любой букве или цифре, но не символу подчеркивания. </P>
<P>Все неалфавитные символы, кроме \, -, ^ (вначале) и завершающего ']', не
являются специальными символами, но использование экранирующего слеша перед ними
не навредит. </P></DIV>
<DIV class=refsect2><A name=regexp.reference.verticalbar></A>
<H3>Вертикальная черта</H3>
<P>Символ вертикальной черты '|' используются для разделения альтернативных
масок. Например шаблон <TT class=literal>gilbert|sullivan</TT> соответствует как
"gilbert" так и "sullivan". Допустимо указывать любое количество альтернатив,
также допустимо указывать пустые альтернативы (соответствуют пустой строке). В
процессе поиска соответствия просматриваются все перечисленные альтернативы
слева направо, останавливаясь после первого найденного соответствия. В случае,
если альтернативные варианты перечислены в подшаблоне, то поиск соответствия
означает нахождение соответствия одному из альтернативных вариантов подмаски и
остатку основного шаблона. </P></DIV>
<DIV class=refsect2><A name=regexp.reference.internal-options></A>
<H3>Установка внутренних опций</H3>
<P>Установки <A href="reference.pcre.pattern.modifiers.php">PCRE_CASELESS</A>,
<A href="reference.pcre.pattern.modifiers.php">PCRE_MULTILINE</A>, <A
href="reference.pcre.pattern.modifiers.php">PCRE_DOTALL</A> и <A
href="reference.pcre.pattern.modifiers.php">PCRE_EXTENDED</A> могут быть
локально предопределены в шаблоне с использованием специальных символьных
Perl-последовательностей, заключенных между символами "(?" и ")".
<DIV class=table><A name=AEN149014></A>
<P><B>Таблица 1. Символы внутренних опций</B></P>
<TABLE class=CALSTABLE border=1>
  <COLGROUP>
  <COL>
  <COL>
  <TBODY>
  <TR>
    <TD><TT class=literal>i</TT></TD>
    <TD>for <A
  href="reference.pcre.pattern.modifiers.php">PCRE_CASELESS</A></TD></TR>
  <TR>
    <TD><TT class=literal>m</TT></TD>
    <TD>для <A
    href="reference.pcre.pattern.modifiers.php">PCRE_MULTILINE</A></TD></TR>
  <TR>
    <TD><TT class=literal>s</TT></TD>
    <TD>для <A
  href="reference.pcre.pattern.modifiers.php">PCRE_DOTALL</A></TD></TR>
  <TR>
    <TD><TT class=literal>x</TT></TD>
    <TD>для <A
  href="reference.pcre.pattern.modifiers.php">PCRE_EXTENDED</A></TD></TR></TBODY></TABLE></DIV>
<P></P>
<P>Например, (?im) указывает на регистронезависимый, многострочный режим поиска.
Также можно сбросить опцию, поставив перед ней символ '-', либо комбинировать
установку и отмену режимов. Например, (?im-sx) устанавливает флаги <A
href="reference.pcre.pattern.modifiers.php">PCRE_CASELESS</A>, <A
href="reference.pcre.pattern.modifiers.php">PCRE_MULTILINE</A> и отменяет флаги
<A href="reference.pcre.pattern.modifiers.php">PCRE_DOTALL</A> и <A
href="reference.pcre.pattern.modifiers.php">PCRE_EXTENDED</A>. В случае, если
опциональный символ расположен непосредственно после либо перед символом '-',
опция будет отменена. </P>
<P>Область видимости данных опций зависит от того, где именно в шаблоне они
используются. В случае, если они указаны вне подмаски, эффект будет тот же, что
и при указании их в самом начале шаблона. Таким образом, нижеследующие паттерны
эквивалентны: </P>
<P
class=literallayout><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(?i)abc<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a(?i)bc<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ab(?i)c<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;abc(?i)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</P>
<P>, что, в свою очередь равносильно компиляции шаблона 'abs' с указанием
модификатора <A href="reference.pcre.pattern.modifiers.php">PCRE_CASELESS</A>.
Другими словами, такие установки верхнего уровня применяются ко всему шаблону
(если отсутствуют дополнительные модификаторы в подмасках). Если присутствуют
несколько опций верхнего уровня, будет использована самая правая опция. </P>
<P>В случае, если опция встречается в подмаске, эффект может быть разным. В Perl
5.005 была добавлена следующая особенность: опция внутри подмаски влияет только
на ту часть подмаски, которая идет после указания опции. Таким образом <TT
class=literal>(a(?i)b)c</TT> соответствует исключительно строкам 'abc' и 'aBc'
(предполагается, что модификатор <A
href="reference.pcre.pattern.modifiers.php">PCRE_CASELESS</A> не используется).
Это означает, что cуществует возможность указывать различные наборы опций для
отдельных участков шаблона. Применение опций в одной из альтернативных веток
также распространяется на все последующие ветки. Например: <TT
class=literal>(a(?i)b|c)</TT> соответствует "ab", "aB", "c" и "C", хотя при
совпадении с "C" первая ветвь покидается до установки опции. Это объясняется
тем, что установка всех опций происходит на этапе компиляции шаблона. </P>
<P>Опции, специфичные для PCRE, такие как <A
href="reference.pcre.pattern.modifiers.php">PCRE_UNGREEDY</A> и <A
href="reference.pcre.pattern.modifiers.php">PCRE_EXTRA</A> могут быть
установлены точно так же, как и Perl-совместимые опции, путем использования
символов U и X соответственно. Флаг (?X) специфичен тем, что должен быть
расположен в шаблоне прежде, чем будет использоваться любая другая
дополнительная возможность, даже если он расположен на верхнем уровне. Лучше
всего размещать флаг (?X) в самом начале шаблона. </P></DIV>
<DIV class=refsect2><A name=regexp.reference.subpatterns></A>
<H3>Подмаски</H3>
<P>Подмаски ограничиваются круглыми скобками, которые могут быть вложенными.
Использование части шаблона как подмаски имеет следующие функции: </P>
<P>1. Локализирует набор альтернатив. Например, шаблон <TT
class=literal>cat(aract|erpillar|)</TT> соответствует одному из слов "cat",
"cataract" или "caterpillar". Без использования скобок он соответствовал бы
строкам "cataract", "erpillar" или пустой строке. </P>
<P>2. Указывает на необходимость захвата подстроки. В том случае, если
соответствие шаблону было найдено, подстроки, соответствующие подмаскам, также
передается обратно вызывающему при помощи аргумента <SPAN class=emphasis><I
class=emphasis>ovector</I></SPAN> функции <B class=function>pcre_exec()</B>.
Открывающие круглые скобки нумеруются слева направо начиная с единицы и их
порядковые номера используются для нумерации соответствующих подстрок в
результате. </P>
<P>Например, если строка "the red king" сопоставляется с шаблоном <TT
class=literal>the ((red|white) (king|queen))</TT>, будут захвачены подстроки
"red king", "red" и "king", и их номера соответственно 1, 2 и 3. </P>
<P>На самом деле выполнение одновременно двух функций не всегда удобно. Бывают
случаи, когда необходима группировка альтернатив без захвата строки. В случае,
если после открывающей круглой скобки следует "?:", захват строки не происходит,
и текущая подмаска не нумеруется. Например, если строка "the white queen"
сопоставляется с шаблоном <TT class=literal>the ((?:red|white)
(king|queen))</TT>, будут захвачены подстроки "white queen" и "queen", и они
будут пронумерованы 1 и 2 соответственно. Максимальное количество захватывающих
подмасок - 99, максимальное количество всех подмасок - 200. </P>
<P>В случае, если в незахватывающей подмаске необходимо указать дополнительные
опции, можно воспользоваться удобным сокращением: символ, обозначающий
устанавливаемую опцию помещается между "?" и ":". Таким образом, следующие два
шаблона </P>
<P
class=literallayout><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(?i:saturday|sunday)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(?:(?i)saturday|sunday)<BR>&nbsp;&nbsp;&nbsp;&nbsp;</P>
<P>соответствуют одному и тому же набору строк. Поскольку альтернативные версии
берутся слева направо, и установленные опции сохраняют свое действие до конца
подмаски, опция, установленная в одной ветке, также имеет эффект во всех
последующих ветках. Поэтому приведенные выше шаблоны совпадают как с "SUNDAY",
так и с "Saturday". </P></DIV>
<DIV class=refsect2><A name=regexp.reference.repetition></A>
<H3>Повторение</H3>
<P>Повторение задается при помощи квантификаторов, следующих за любым из
указанных ниже элементов:
<P></P>
<UL>
  <LI>
  <P>произвольным, возможно экранированным, символом</P>
  <LI>
  <P>метасимволом "точка"</P>
  <LI>
  <P>символьным классом</P>
  <LI>
  <P>ссылкой на предыдущий фрагмент шаблона (см. следующий раздел)</P>
  <LI>
  <P>взятой в круглый скобки подмаской (если это не утверждение - см.
  далее)</P></LI></UL>
<P></P>
<P>Общий квантификатор повторения указывает минимальное и максимальное
допустимое количество совпадений, согласно двум числам, заключенными в фигурные
скобки и разделенными запятой. Числа должны быть меньше чем 65536, и первое
число не должно превышать второе по значению. Например: <TT
class=literal>z{2,4}</TT> соответствует "zz", "zzz" или "zzzz". Закрывающая
фигурная скобка сама по себе не является специальным символом. В случае, если
второе число опущено, но запятая присутствует, нет верхнего предела; в случае,
если и второе число и запятая опущены, требуется точное число повторений. Таким
образом <TT class=literal>[aeiou]{3,}</TT> соответствует как минимум трем
последовательным гласным (а также любому их количеству выше трех), в то время
как <TT class=literal>\d{8}</TT> соответствует исключительно восми цифрами.
Открывающая фигурная скобка, расположенная в недопустимой для квантификатора
позиции, либо не соответствующая синтаксису квантификатора, интерпретируется как
обыкновенная символьная строка. Например, {,6} не является квантификатором, а
интерпретируется как символьная строка из четырех символов. </P>
<P>Квантификатор {0} является допустимым и ведет себя таким образом, будто бы
сам квантификатор и предшествующий ему элемент отсутствуют. </P>
<P>Для удобства (а так же обратной совместимости) три наиболее распространённых
квантификатора имеют односимвольные аббревиатуры:
<DIV class=table><A name=AEN149089></A>
<P><B>Таблица 2. Односимвольные квантификаторы</B></P>
<TABLE class=CALSTABLE border=1>
  <COLGROUP>
  <COL>
  <COL>
  <TBODY>
  <TR>
    <TD><TT class=literal>*</TT></TD>
    <TD>эквивалентен <TT class=literal>{0,}</TT></TD></TR>
  <TR>
    <TD><TT class=literal>+</TT></TD>
    <TD>эквивалентен <TT class=literal>{1,}</TT></TD></TR>
  <TR>
    <TD><TT class=literal>?</TT></TD>
    <TD>эквивалентен <TT class=literal>{0,1}</TT></TD></TR></TBODY></TABLE></DIV>
<P></P>
<P>Можно конструировать бесконечные циклы, указав после шаблона, не
содержащегося в заданной строке, квантификатор, не имеющий верхнего предела,
например: <TT class=literal>(a?)*</TT> </P>
<P>Ранние версии Perl и PCRE выдавали ошибку во время компиляции для таких
шаблонов. Однако, поскольку бывают случаи, когда подобные шаблоны могли бы быть
полезны, поддержка таких шаблонов была добавлена. Но если любое повторение такой
подмаски фактически не совпадает ни с какими символами, цикл принудительно
прерывается. </P>
<P>По умолчанию, все квантификаторы являются "жадными", это означает, что они
совпадают максимально возможное количество раз (но не более, чем максимально
допустимое количество раз), не приводя к невозможности сопоставления остальных
частей шаблона. Классический пример проблем, которые могут возникнуть в связи с
такой особенностью квантификаторов - нахождение комментариев в C-программах.
Комментарием считается произвольный текст, находящийся внутри символьных
комбинаций /* и */ (при этом, символы '/' и '*' также могут быть частью
комментария). Попытка найти комментарии при помощи шаблона <TT
class=literal>/\*.*\*/</TT> в строке <TT class=literal>/* первый комментарий */
не комментарий /* второй комментарий */</TT> закончится неудачей, поскольку
указанный шаблон соответствует всей строке целиком (из-за жадности кватификатора
'*'). </P>
<P>Однако, если сразу же после квантификатора идет вопросительный знак, он
перестает быть жадным и соответствует минимально допустимому количеству раз.
Таким образом, шаблон <TT class=literal>/\*.*?\*/</TT> корректно находит все
комментарии языка Си. Использование символа '?' после квантификатора влияет
исключительно на его жадность, и не затрагивает никакие другие свойства. Не
следует путать использование символа '?' как, собственно, квантификатора (ноль
либо одно соответствие) и как ограничителя жадности. Также в следствие его
двойственной функциональности может использоваться следующая запись: <TT
class=literal>\d??\d</TT>, которая в первую очередь соответствует одной цифре,
но также может соответствовать и двум цифрам, если это необходимо для
соответствия остальных частей шаблона. </P>
<P>В случае, если установлена опция <A
href="reference.pcre.pattern.modifiers.php">PCRE_UNGREEDY</A> (отсутствующая в
Perl), квантификаторы являются не жадными по умолчанию, но могут становиться
жадными, если за ними следует символ '?'. Говоря другими словами, знак вопроса
инвертирует жадность квантификаторов. </P>
<P>В случае, если используется подмаска с квантификатором, для которого задано
минимальное количество повторений (больше одного), либо если задано максимальное
количество повторений, для откомпилированного шаблона требуется больше памяти
(пропорционально миниму либо максимуму соответственно). </P>
<P>В случае, если шаблон начинается с .* либо .{0,}, и установлен модификатор <A
href="reference.pcre.pattern.modifiers.php">PCRE_DOTALL</A> (являющийся аналогом
Perl-опции /s), который позволяет метасимволу "точка" соответствовать переводу
строки, шаблон неявно заякоривается. Это происходит поскольку все последующие
конструкции будут сопоставляться с каждой символьной позицией в обрабатываемом
тексте, и, как следствие, начало строки - единственная позиция, дающая наиболее
полное совпадение. PCRE рассматривает каждый такой шаблон, как если бы ему
предшествовала последовательность <TT class=literal>\A</TT>. В случае, если
известно, что данные не содержат переводов строк, а сам шаблон начинается на .*,
рекомендуется использовать <A
href="reference.pcre.pattern.modifiers.php">PCRE_DOTALL</A> для оптимизации
шаблона, либо использовать метасимвол '^' для указания явного заякоривания. </P>
<P>В случае, если захватывающая подмаска повторяется, результирующим значением
подмаски будет подстрока, совпадающая с результатом последней итерации.
Например, после того, как <TT class=literal>(tweedle[dume]{3}\s*)+</TT> совпадет
с "tweedledum tweedledee", результирующим значением подмаски будет "tweedledee".
Однако, если присутствуют вложенные захватывающие подмаски, соответствующие
значения могут быть установлены в предыдущих итерациях. Например, после того,
как <TT class=literal>/(a|(b))+/</TT> совпадет с "aba", значением второй
захваченной подстроки будет "b". </P></DIV>
<DIV class=refsect2><A name=regexp.reference.back-references></A>
<H3>Обратные ссылки</H3>
<P>Вне символьного класса обратный слеш с последующей цифрой больше нуля (и,
возможно, последующими цифрами) интерпретируется как ссылка на предшествующую
захватывающую подмаску, предполагая, что соответствующее количество
предшествующих открывающих круглых скобок присутствует. </P>
<P>Однако, в случае, если следующее за обратным слешем число меньше 10, оно
всегда интерпретируется как обратная ссылка, и приводит к ошибке только в том
случае, если нет соответствующего числа открывающих скобок. Другими словами,
открывающие скобки не обязаны предшествовать ссылке для чисел меньше 10. Более
детальную информацию об обработке слеша, за которым следуют цифры, можно найти в
разделе "Обратный слеш". </P>
<P>Обратная ссылка сопоставляется с частью строки, захваченной соответствующей
подмаской, но не с самой подмаской. Таким образом шаблон <TT
class=literal>(sens|respons)e and \1ibility</TT> соответствует "sense and
sensibility", "response and responsibility", но не "sense and responsibility". В
случае, если обратная ссылка обнаружена во время регистрозависимого поиска, то
при сопоставлении обратной ссылки регистр также учитывается. Например, <TT
class=literal>((?i)rah)\s+\1</TT> соответствует "rah rah" и "RAH RAH", но не
"RAH rah", хотя сама подмаска сопоставляется без учета регистра. </P>
<P>На одну и ту же подмаску может быть несколько ссылок. Если подмаска не
участвовала в сопоставлении, то сопоставление со ссылкой на нее всегда терпит
неудачу. Например, шаблон <TT class=literal>(a|(bc))\2</TT> терпит неудачу, если
находит соответствие с "a" раньше, чем с "bc". Поскольку может быть до 99
обратных ссылок, все цифры, следующие за обратным слешем, рассматриваются как
часть потенциальной обратной ссылки. Если за ссылкой должна следовать цифра,
необходимо использовать ограничитель. В случае, если указан флаг <A
href="reference.pcre.pattern.modifiers.php">PCRE_EXTENDED</A>, ограничителем
может быть любой пробельный символ. В противном случае можно использовать пустой
комментарий. </P>
<P>Ссылка на подмаску, внутри которой она расположена, всегда терпит неудачу,
если это первое сопоставление текущей подмаски. Например, шаблон (a\1) не
соответствует ни одной строке. Но все же такие ссылки бывают полезны в
повторяющихся подмасках. Например, шаблон <TT class=literal>(a|b\1)+</TT>
совпадает с любым количеством "a", "aba", "ababaa"... При каждой итерации
подмаски обратная ссылка соответствует той части строки, которая была захвачена
при предыдущей итерации. Чтобы такая конструкция работала, шаблон должен быть
построен так, чтобы при первой итерации сопоставление с обратной ссылкой не
производилось. Этого можно достичь, используя альтернативы (как в предыдущем
примере) либо квантификаторы с минимумом, равным нулю. </P></DIV>
<DIV class=refsect2><A name=regexp.reference.assertions></A>
<H3>Утверждения</H3>
<P>Утверждения - это проверки касательно символов, идущих до или после текущей
позиции сопоставления, ничего при этом не поглощая (никакие символы исходного
текста не ставятся в соответствие утверждениям). Наиболее простые варианты
утверждений, такие как \b, \B, \A, \Z, \z, ^ и $ были рассмотрены ранее. Более
сложные утверждения записываются как подмаски. Утверждения бывают двух видов:
те, которые анализируют текст, предшествующий текущей позиции, и идущий после
нее. </P>
<P>Сопоставление подмаски, содержащий утверждение, происходит обычным образом,
за исключением того, что текущая позиция не изменяется. Утверждения касательно
последующего текста начинаются с (?= для положительных утверждений и с (?! для
отрицающих утверждений. Например, <TT class=literal>\w+(?=;)</TT> совпадает со
словом, за которым следует символ ';', но при этом сама точка с запятой в
совпадение не включается. А <TT class=literal>foo(?!bar)</TT> соответствует
любому появлению "foo", после которого не идёт "bar". Заметим, что похожий
шаблон <TT class=literal>(?!foo)bar</TT> не будет искать вхождение "bar",
которому предшествует любая строка за исключением "foo". Но, тем не менее, он
будет соответствовать любым вхождениям подстроки "bar", поскольку условие
(?!foo) всегда <TT class=constant><B>TRUE</B></TT>, если следующие три символа -
"bar". Для получения желаемого результата необходимо воспользоваться второй
категорией утверждений. </P>
<P>Утверждения касательно предшествующего текста начинаются с (?&lt;= для
положительных утверждений и (?&lt;! для отрицающих. Например, <TT
class=literal>(?&lt;!foo)bar</TT> не найдёт вхождения "bar", которым не
предшествует "foo". Сами утверждения 'назад' ограничены так, чтобы все
подстроки, которым они соответствуют, имели фиксированную длину. Но, в случае,
если используются несколько альтернатив, они не обязаны иметь одинаковую длину.
Таким образом шаблон <TT class=literal>(?&lt;=bullock|donkey)</TT> корректен, но
<TT class=literal>(?&lt;!dogs?|cats?)</TT> вызовет ошибку во время компиляции.
Ветки, которые соответствуют строкам разной длины, разрешены только на верхнем
уровне утверждений касательно предшествующего текста. Это расширение
относительно Perl 5.005, который требует чтобы все ветки соответствовали строкам
одинаковой длины. Такое утверждение как <TT class=literal>(?&lt;=ab(c|de))</TT>
не корректно, поскольку верхний уровень маски может соответствовать строкам
разной длины, но его можно преобразовать к корректному шаблону, используя
альтернативы на верхнем уровне: <TT class=literal>(?&lt;=abc|abde)</TT>.
Утверждения касательно предшествующего текста реализованы так, что для каждой
альтернативы текущая позиция временно переносится назад, на фиксированную
ширину, после чего выполняется поиск соответствия условию. В случае, если перед
текущей позицией недостаточно символов, поиск соответствия терпит неудачу.
Утверждения назад в сочетании с однократными подмасками могут быть особенно
удобны для поиска в конце строки; соответствующий пример приведен в конце
раздела "Однократные подмаски". </P>
<P>Несколько утверждений (разных типов) могут присутствовать в утверждении,
например: <TT class=literal>(?&lt;=\d{3})(?&lt;!999)foo</TT> совпадает с
подстрокой "foo", которой предшествуют три цифры, отличные от "999". Следует
понимать, что каждое из утвержений проверяется относительно одной и той же
позиции в обрабатываемом тексте. Вначале выполняется проверка того, что
предшествующие три символа - это цифры, затем проверяется, чтобы эти же цифры не
являлись числом 999. Приведенный выше шаблон не соответствует подстроке "foo",
которой предшествуют шесть символов, первые три из которых - цифры, а последние
три не образуют "999". Например, он не соответствует строке "123abcfoo", в то
время как шаблон <TT class=literal>(?&lt;=\d{3}...)(?&lt;!999)foo</TT> -
соответствует. В этом случае анализируются предшествующие шесть символов на
предмет того, чтобы первые три из них были цифрами, а последние три не
образовали "999". </P>
<P>Утверждения могут быть вложенными, причем в произвольных сочетаниях: <TT
class=literal>(?&lt;=(?&lt;!foo)bar)baz</TT> соответствует подстроке "baz",
которой предшествует "bar", перед которой, в свою очередь, нет "foo", а <TT
class=literal>(?&lt;=\d{3}(?!999)...)foo</TT> - совершенно другой шаблон,
соответствующий подстроке "foo", которой предшествуют три цифры и три
произвольных символа, отличных от "999". </P>
<P>Утверждающие подмаски являются незахватывающими и неповторяемыми, поскольку
бессмысленно повторять одно и то же несколько раз. Если в утверждении
произвольного типа находится захватывающая подмаска, она нумеруется в той же
последовательности, что и все остальные захватывающие подмаски, но захват
соответствующих значений происходит только для положительных утверждений,
поскольку для отрицающих это не имеет смысла. </P>
<P>В утверждениях обрабатывается не более, чем 200 захватывающих подмасок.
</P></DIV>
<DIV class=refsect2><A name=regexp.reference.onlyonce></A>
<H3>Однократные подмаски</H3>
<P>Как для минимального, так и максимального количества повторений, если
последующая часть шаблона терпит неудачу при сопоставлении, происходит повторный
анализ повторяемого выражения на предмет того, возможно ли успешное
сопоставление всего шаблона при другом количестве повторений. Бывают случаи,
когда необходимо изменить описанную логику работы для реализации специфического
сопоставления либо оптимизации шаблона (если автор уверен, что других вариантов
соответствия нет). </P>
<P>В качестве примера, рассмотрим шаблон \d+foo в применении к строке <TT
class=literal>123456bar</TT> </P>
<P>После того, как \d+ будет сопоставлен с первыми шестью цифрами, сопоставление
"foo" потерпит неудачу. После этого, в соответствие \d+, будет сопоставлено 5
цифр, после очередной неудачи будет сопоставлено 4 цифры и так далее. В конце
концов весь шаблон потерпит неудачу. Однократные подмаски указывают, что если
одна часть шаблона была сопоставлена, ее не стоит анализировать повторно.
Применимо к приведенному выше примеру весь шаблон потерпел бы неудачу после
первого же неудачного сопоставления с "foo". Записываются однократные шаблоны
при помощи круглых скобок следующим образом: (?&gt;. Например: <TT
class=literal>(?&gt;\d+)bar</TT> </P>
<P>Этот вид подмаски предотвращает повторный ее анализ в случае, если
сопоставление последующих элементов терпят неудачу. Однако, это не мешает
повторно анализировать любые другие элементы, в том числе предшествующие
однократной подмаске. </P>
<P>Говоря другими словами, подмаски такого типа соответствуют той части
подстроки, которой соответствовала бы одиночная изолированная маска, заякоренная
на текущей позиции обрабатываемого текста. </P>
<P>Однократные подмаски являются незахватывающими. Простые примеры, подобные
приведенному выше, можно охарактеризовать как безусловный захват максимального
количества повторений. В то время как \d+ и \d+? корректируются так, чтобы
остальные части шаблона так же совпали, (?&gt;\d+) соответствует исключительно
максимальной по длине последовательности цифр, даже если это приводит к неудаче
при сопоставлении других частей шаблона. </P>
<P>Однократные подмаски могут включать в себя более сложные конструкции, а также
могут быть вложенными. </P>
<P>Однократные подмаски могут использоваться совместно с утверждениями
касательно предшествующего текста для описания эффективных сопоставлений в конце
обрабатываемого текста. Рассмотрим простой шаблон <TT class=literal>abcd$</TT> в
применении к длинному тексту, который не соответствует указанной маске.
Поскольку поиск происходит слева направо, вначале PCRE будет искать букву "a", и
только потом анализировать следующие записи в шаблоне. В случае, если шаблон
указан в виде <TT class=literal>^.*abcd$</TT>. В таком случае вначале .*
сопоставляется со всей строкой, после чего сопоставление терпит неудачу (так как
нет последующего символа 'a'). После чего .* сопоставляется со всей строкой,
кроме последнего символа, потом кроме двух последних символов, и так далее. В
конечном итоге поиск символа 'a' происходит по всей строке. Однако, если шаблон
записать в виде: <TT class=literal>^(?&gt;.*)(?&lt;=abcd)</TT> повторный анализ
для .* не выполняется, и, как следствие, может соответствовать только всей
строке целиком. После чего утверждение проверяет последние четыре символа на
совпадение с 'abcd', и в случае неудачи все сопоставление терпит неудачу. Для
больших объемов обрабатываемого текста этот подход имеет значительный выигрыш во
времени выполнения. </P>
<P>Если шаблон содержит неограниченное повторение внутри подмаски, которая в
свою очередь также может повторяться неограниченное количество раз,
использование однократных подмасок позволяет избегать многократных неудачных
сопоставлений, которые длятся достаточно продолжительное время. Шаблон <TT
class=literal>(\D+|&lt;\d+&gt;)*[!?]</TT> соответствует неограниченному
количеству подстрок, которые состоят не из цифр, либо из цифр заключенных в
&lt;&gt;, за которыми следует ? либо !. В случае, если в обрабатываемом тексте
содержатся соответствия, время работы регулярного выражения будет невелико. Но
если его применить к строке <TT
class=literal>aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</TT> это
займет длительное время. Это связанно с тем, что строка может быть разделена
между двумя частями шаблона многими способами, и все они будут опробованы (в
примере мы использовали [?!], поскольку в случае одиночного символа в конце
шаблона и PCRE и Perl выполняют оптимизацию. Они запоминают последний одиночный
символ и в случае его отсутствия выдают неудачу). Если изменить шаблон на <TT
class=literal>((?&gt;\D+)|&lt;\d+&gt;)*[!?]</TT>, нецифровые последовательности
не могут быть разорваны, и невозможность сопоставления обнаруживается гораздо
быстрее. </P></DIV>
<DIV class=refsect2><A name=regexp.reference.conditional></A>
<H3>Условные подмаски</H3>
<P>В PCRE реализована возможность подчинять шаблон условию либо выбирать из двух
условных подмасок в зависимости от успеха сопоставления предыдущей подмаски.
Условные подмаски имеют две допустимые формы использования: </P>
<P
class=literallayout><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(?(condition)yes-pattern)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(?(condition)yes-pattern|no-pattern)<BR>&nbsp;&nbsp;&nbsp;&nbsp;</P>
<P>В случае успешного сопоставления условия condition, используется подмаска
yes-pattern, в противном случае no-pattern (если он присутствует). Если указано
более двух альтернатив, возникнет ошибка во время компиляции. </P>
<P>Условия бывают двух видов. В случае, если между скобками заключены цифры,
условие будет выполняться в том случае, если подмаска с соответствующим номером
была успешно сопоставлена. Рассмотрим следующий шаблон (он содержит незначащий
пробел для удобства чтения, подразумевается использование модификатора <A
href="reference.pcre.pattern.modifiers.php">PCRE_EXTENDED</A>), разделив его для
удобства на три смысловые части: <TT class=literal>( \( )? [^()]+ (?(1) \)
)</TT> </P>
<P>Первая часть соответствует опциональной открывающей скобке, и в случае если
она присутствует, захватывает ее как значение первой подмаски. Следующая часть
соответствует одному или более символам, отличным от круглой скобки. Третья
часть является условной подмаской, зависящей от результата сопоставления первой
подмаски. В случае, если в начале обрабатываемых данных была обнаружена
открывающая круглая скобка, условие будет интерпретировано как истина, и,
следовательно, для успешного сопоставления третьей части шаблона необходима
закрывающая круглая скобка. В противном случае, поскольку не указана вторая
ветвь условного шаблона, третья часть будет сопоставлена с пустой строкой.
Суммируя все вышесказанное, приведенный шаблон совпадает с последовательностью
не-скобок, возможно, заключенной в круглые скобки. </P>
<P>В случае, если условие не является последовательностью цифр, оно обязано быть
условием. Это также может быть утверждающее или отрицающее условие касательно
предшествующего либо последующего текста. Рассмотрим еще один шаблон, также
содержащий незначащий пробел и два условия, записанные в следующей строке: </P>
<P
class=literallayout><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(?(?=[^a-z]*[a-z])<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\d{2}-[a-z]{3}-\d{2}&nbsp;&nbsp;|&nbsp;&nbsp;\d{2}-\d{2}-\d{2}&nbsp;)<BR>&nbsp;&nbsp;&nbsp;&nbsp;</P>
<P>Приведен пример с утверждающим условием касательно предшествующего текста,
которое выполняется для необязательной последовательности не-букв с последующей
буквой. Говоря другими словами, указанное условие проверяет наличие хотя бы
одной предшествующей буквы. В случае, если буква найдена, выполняется
сопоставление с первой альтернативой, в противном случае - со второй
альтернативой. Приведенный шаблон соответствует строкам двух видов: dd-aaa-dd
либо dd-dd-dd, где aaaa - это буквы, а dd - цифры. </P></DIV>
<DIV class=refsect2><A name=regexp.reference.comments></A>
<H3>Комментарии</H3>
<P>Служебная последовательность (?# обозначает начало комментария, который
продолжается до ближайшей закрывающей скобки. Вложенные скобки не допускаются.
Символы, находящиеся внутри комментария, не принимают участия в сопоставлении
шаблона. </P>
<P>В случае, если используется модификатор <A
href="reference.pcre.pattern.modifiers.php">PCRE_EXTENDED</A>, неэкранированный
символ '#' вне символьного класса также означает начало блока комментария,
который длится до конца текущей строки. </P></DIV>
<DIV class=refsect2><A name=regexp.reference.recursive></A>
<H3>Рекурсивные шаблоны</H3>
<P>Рассмотрим задачу поиска соответствия со строкой, находящихся внутри
неограниченного количества круглых скобок. Без использования рекурсии лучшее,
что можно сделать - написать шаблон, который будет решать задачу для некоторой
ограниченной глубины вложенности, так как обработать неограниченную глубину не
предоставляется возможным. В Perl 5.6 предоставлены некоторые экспериментальные
возможности, которые в том числе позвояляют реализовать рекурсию в шаблонах.
Специально обозначение (?R) используется для указания рекурсивной подмаски.
Таким образом, приведем PCRE шаблон, решающий поставленную задачу
(подразумевается, что используется модификатор <A
href="reference.pcre.pattern.modifiers.php">PCRE_EXTENDED</A>, незначащие
пробелы игнорируются): <TT class=literal>\( ( (?&gt;[^()]+) | (?R) )* \)</TT>
</P>
<P>Вначале он соответствует открывающей круглой скобке. Далее он соответствует
любому количеству подстрок, каждая из которых может быть последовательностью
не-скобок, либо строкой, рекурсивно соответствующей шаблону (т.е. строкой,
корректно заключенной в круглые скобки). И, в конце, идет закрывающая круглая
скобка. </P>
<P>Приведенный пример шаблона использует вложенные неограниченные повторения,
поэтому использование однократных шаблонов значительно ускоряет процесс
сопоставления, особенно в случаях, когда строка не соответствует заданной маске.
Например, если его применить к строке: <TT
class=literal>(aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa()</TT>, то
несоответствие будет обнаружено достаточно быстро. Но в случае, если однократные
шаблоны не используются, сопоставление будет затягиваться на длительное время,
так как существует множество способов разделения строки между квантификаторами +
и *, и все они должны быть проверены, прежде чем будет выдано сообщение о
неудаче. </P>
<P>Значение, устанавливаемое для захватывающей подмаски будет соответствовать
значению, захваченному на наиболее глубоком уровне рекурсии. В случае, если
приведенный выше шаблон сопоставляется со строкой <TT
class=literal>(ab(cd)ef)</TT>, захваченным значением будет 'ef', которое
является последним значением, принимаемым на верхнем уровне. В случае, если
добавить дополнительные скобки <TT class=literal>\( ( ( (?&gt;[^()]+) | (?R) )*
) \)</TT>, захваченным значением будет "ab(cd)ef". В случае, если в шаблоне
встречается более, чем 15 захватывающих скобок, PCRE требуется больше памяти для
обработки рекурсии, чем обычно. Память выделяется при помощи функции
pcre_malloc, и освобождается соответственно функцией pcre_free. Если память не
может быть выделена, сохраняются данные только для первых 15 захватывающих
скобок, так как нет способа выдать ошибку out-of-memory изнутри рекурсии.
</P></DIV>
<DIV class=refsect2><A name=regexp.reference.performances></A>
<H3>Производительность</H3>
<P>Некотрые элементы, которые могут встречаться в шаблонах, являются более
эффективными, чем ряд других. Например, гораздо эффективней использовать
символьный класс [aeiou] вместо набора альтернатив (a|e|i|o|u). Как правило,
более простая конструкция является более эффективной. Книга Jeffrey Friedl'а
содержит много обсуждений вопроса оптимизации регулярных выражений. </P>
<P>В случае, если шаблон начинается с .* и используется флаг <A
href="reference.pcre.pattern.modifiers.php">PCRE_DOTALL</A>, шаблон неявно
заякоривается, так как он может совпадать только в начале строки. Но если <A
href="reference.pcre.pattern.modifiers.php">PCRE_DOTALL</A> не используется,
PCRE не может выполнить соответствующую оптимизацию, так как в таком случае
метасимвол '.' не соответствует символу начала строки (если обрабатываемые
данные содержат переводы строк, такой шаблон может соответствовать шаблону не от
начала строки, а от позиции непосредственно после перевода строки). Например,
применяя шаблон <TT class=literal>(.*) second</TT> к строке "first\nand second"
(где \n обозначает символ перевода строки), значение, захваченное первой
подмаской, будет 'and'. Чтобы обработать все возможные точки соответствия, PCRE
пытается сопоставить шаблон после каждого символа перевода строки. </P>
<P>В случае, если вы используете подобные шаблоны для обработки данных, не
содержащих переводы строк, для лучшей производительности используйте модификатор
<A href="reference.pcre.pattern.modifiers.php">PCRE_DOTALL</A>, либо начинайте
шаблон с ^.* для указания явного заякоривания. Это предотвратит PСRE от поиска
символов новых строк и дополнительных попыток сопоставить шаблон с каждой такой
найденной позицией. </P>
<P>Избегайте шаблонов, которые содержат вложенные неограниченные повторения.
Сопоставление их со строками, не содержащими совпадений, занимает длительное
время. Рассмотрим пример шаблона <TT class=literal>(a+)*</TT> </P>
<P>Он может соответствовать с "aaaa" 33-мя различными способами, и эта цифра
очень быстро растет при увеличении строки. (В данном примере, квантификатор *
может совпадать 0, 1, 2, 3 или 4 раза, и для каждого такого случая, кроме нуля,
квантификатор + также может совпадать различное число раз.) Если остаток шаблона
таков, что все совпадение терпит неуачу, PCRE должно попробовать все возможные
варианты совпадения, что может потребовать огромного количества времени. </P>
<P>При помощи оптимизации можно отловить наиболее простые случаи, такие как <TT
class=literal>(a+)*b</TT> где следом идёт литеральный символ. Прежде, чем
производить стандартную процедуру поиска, PCRE проверяет в последующей подстроке
наличие символа 'b', и, в случае отсутствия такового, попытка сопоставления
немедленно завершается неудачей. Однако, когда последующего литерала нет,
оптимизация не может быть применена. Вы можете ощутить разницу, сравнив
поведение <TT class=literal>(a+)*\d</TT> с поведением приведенного выше шаблона.
Первый определяет невозможность сопоставления практически сразу же, при
сопоставлении со строкой состоящей из символов 'a', в то время как второй тратит
длительное время на поиск в строках длинее 20 символов. </P></DIV></DIV>
</BODY></HTML>
